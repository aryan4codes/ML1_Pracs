{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eae66063",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:22.652122Z",
     "iopub.status.busy": "2024-05-11T08:40:22.651650Z",
     "iopub.status.idle": "2024-05-11T08:40:25.063743Z",
     "shell.execute_reply": "2024-05-11T08:40:25.062641Z"
    },
    "id": "gsDSHxwqqmNC",
    "outputId": "ade435e1-63f4-4bfd-9d9c-d5919bc78527",
    "papermill": {
     "duration": 2.421829,
     "end_time": "2024-05-11T08:40:25.066291",
     "exception": false,
     "start_time": "2024-05-11T08:40:22.644462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Income($)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rob</td>\n",
       "      <td>27</td>\n",
       "      <td>70000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Michael</td>\n",
       "      <td>29</td>\n",
       "      <td>90000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mohan</td>\n",
       "      <td>29</td>\n",
       "      <td>61000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ismail</td>\n",
       "      <td>28</td>\n",
       "      <td>60000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kory</td>\n",
       "      <td>42</td>\n",
       "      <td>150000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Gautam</td>\n",
       "      <td>39</td>\n",
       "      <td>155000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>David</td>\n",
       "      <td>41</td>\n",
       "      <td>160000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Andrea</td>\n",
       "      <td>38</td>\n",
       "      <td>162000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Brad</td>\n",
       "      <td>36</td>\n",
       "      <td>156000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Angelina</td>\n",
       "      <td>35</td>\n",
       "      <td>130000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Name  Age  Income($)\n",
       "0       Rob   27      70000\n",
       "1   Michael   29      90000\n",
       "2     Mohan   29      61000\n",
       "3    Ismail   28      60000\n",
       "4      Kory   42     150000\n",
       "5    Gautam   39     155000\n",
       "6     David   41     160000\n",
       "7    Andrea   38     162000\n",
       "8      Brad   36     156000\n",
       "9  Angelina   35     130000"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import sklearn\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "df= pd.read_csv('/kaggle/input/kmeans-income/income.csv')\n",
    "\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d8daa691",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:25.079625Z",
     "iopub.status.busy": "2024-05-11T08:40:25.079247Z",
     "iopub.status.idle": "2024-05-11T08:40:25.379014Z",
     "shell.execute_reply": "2024-05-11T08:40:25.378077Z"
    },
    "id": "2h9rIECUqmND",
    "outputId": "8bcb6e06-34b6-4963-e890-2ecf90951635",
    "papermill": {
     "duration": 0.308948,
     "end_time": "2024-05-11T08:40:25.381352",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.072404",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x7bbf44f29f00>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Age'],df['Income($)'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b8fae45a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:25.394556Z",
     "iopub.status.busy": "2024-05-11T08:40:25.394147Z",
     "iopub.status.idle": "2024-05-11T08:40:25.402008Z",
     "shell.execute_reply": "2024-05-11T08:40:25.400888Z"
    },
    "id": "h9jyZDZtqmND",
    "outputId": "c3c217cd-c8a8-4153-9b9e-f6dc5f427fe9",
    "papermill": {
     "duration": 0.017045,
     "end_time": "2024-05-11T08:40:25.404257",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.387212",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'algorithm': 'lloyd',\n",
       " 'copy_x': True,\n",
       " 'init': 'k-means++',\n",
       " 'max_iter': 300,\n",
       " 'n_clusters': 3,\n",
       " 'n_init': 'warn',\n",
       " 'random_state': None,\n",
       " 'tol': 0.0001,\n",
       " 'verbose': 0}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km = KMeans(n_clusters=3)\n",
    "km.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7631512d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:25.417873Z",
     "iopub.status.busy": "2024-05-11T08:40:25.416887Z",
     "iopub.status.idle": "2024-05-11T08:40:25.484927Z",
     "shell.execute_reply": "2024-05-11T08:40:25.483578Z"
    },
    "id": "SF22M29nqmND",
    "outputId": "6668ad75-be0d-498e-b773-37b2a6c1dbfd",
    "papermill": {
     "duration": 0.07755,
     "end_time": "2024-05-11T08:40:25.487452",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.409902",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0],\n",
       "      dtype=int32)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred= km.fit_predict(df[['Age','Income($)']])\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a23f9542",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:25.501710Z",
     "iopub.status.busy": "2024-05-11T08:40:25.500782Z",
     "iopub.status.idle": "2024-05-11T08:40:25.513022Z",
     "shell.execute_reply": "2024-05-11T08:40:25.512032Z"
    },
    "id": "p4KBQVSvqmND",
    "outputId": "c8a333e2-1476-434d-b2b4-e43f49ee3e4f",
    "papermill": {
     "duration": 0.021674,
     "end_time": "2024-05-11T08:40:25.515133",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.493459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Income($)</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rob</td>\n",
       "      <td>27</td>\n",
       "      <td>70000</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Michael</td>\n",
       "      <td>29</td>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mohan</td>\n",
       "      <td>29</td>\n",
       "      <td>61000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ismail</td>\n",
       "      <td>28</td>\n",
       "      <td>60000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kory</td>\n",
       "      <td>42</td>\n",
       "      <td>150000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Gautam</td>\n",
       "      <td>39</td>\n",
       "      <td>155000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>David</td>\n",
       "      <td>41</td>\n",
       "      <td>160000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Andrea</td>\n",
       "      <td>38</td>\n",
       "      <td>162000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Brad</td>\n",
       "      <td>36</td>\n",
       "      <td>156000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Angelina</td>\n",
       "      <td>35</td>\n",
       "      <td>130000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Name  Age  Income($)  Cluster\n",
       "0       Rob   27      70000        2\n",
       "1   Michael   29      90000        2\n",
       "2     Mohan   29      61000        0\n",
       "3    Ismail   28      60000        0\n",
       "4      Kory   42     150000        1\n",
       "5    Gautam   39     155000        1\n",
       "6     David   41     160000        1\n",
       "7    Andrea   38     162000        1\n",
       "8      Brad   36     156000        1\n",
       "9  Angelina   35     130000        1"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Cluster']= y_pred\n",
    "\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f2293a15",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:25.529185Z",
     "iopub.status.busy": "2024-05-11T08:40:25.528778Z",
     "iopub.status.idle": "2024-05-11T08:40:25.817998Z",
     "shell.execute_reply": "2024-05-11T08:40:25.816955Z"
    },
    "id": "l0Kw2WsDqmNE",
    "outputId": "9c42ee44-6844-4330-cc13-80c7341becac",
    "papermill": {
     "duration": 0.299105,
     "end_time": "2024-05-11T08:40:25.820549",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.521444",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Clusters')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df1= df[df.Cluster==1]\n",
    "df2= df[df.Cluster==2]\n",
    "df3= df[df.Cluster==0]\n",
    "\n",
    "plt.scatter(x=df1.Age,y=df1['Income($)'],color='green')\n",
    "plt.scatter(x=df2.Age,y=df2['Income($)'],color='red')\n",
    "plt.scatter(x=df3.Age,y=df3['Income($)'],color='blue')\n",
    "\n",
    "plt.title(\"Clusters\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8c8c0705",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:25.836239Z",
     "iopub.status.busy": "2024-05-11T08:40:25.835826Z",
     "iopub.status.idle": "2024-05-11T08:40:25.851261Z",
     "shell.execute_reply": "2024-05-11T08:40:25.850192Z"
    },
    "id": "QqdtHJx5qmNE",
    "outputId": "9a489267-25d5-49cf-face-004b8a29017a",
    "papermill": {
     "duration": 0.025956,
     "end_time": "2024-05-11T08:40:25.853762",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.827806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but MinMaxScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0     0.213675\n",
       "1     0.384615\n",
       "2     0.136752\n",
       "3     0.128205\n",
       "4     0.897436\n",
       "5     0.940171\n",
       "6     0.982906\n",
       "7     1.000000\n",
       "8     0.948718\n",
       "9     0.726496\n",
       "10    0.786325\n",
       "11    0.000000\n",
       "12    0.025641\n",
       "13    0.051282\n",
       "14    0.038462\n",
       "15    0.068376\n",
       "16    0.170940\n",
       "17    0.153846\n",
       "18    0.162393\n",
       "19    0.299145\n",
       "20    0.316239\n",
       "21    0.111111\n",
       "Name: Income($), dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler= MinMaxScaler()\n",
    "scaler.fit(df[['Income($)']])\n",
    "\n",
    "df['Income($)'] = scaler.transform(df['Income($)'].values.reshape(-1, 1))\n",
    "\n",
    "df['Income($)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1b1c5107",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:25.869066Z",
     "iopub.status.busy": "2024-05-11T08:40:25.868641Z",
     "iopub.status.idle": "2024-05-11T08:40:25.881688Z",
     "shell.execute_reply": "2024-05-11T08:40:25.880632Z"
    },
    "id": "wRp6v4P0qmNE",
    "outputId": "d979a067-62b2-490e-f15a-064e8b45506d",
    "papermill": {
     "duration": 0.023488,
     "end_time": "2024-05-11T08:40:25.884098",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.860610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but MinMaxScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0     0.058824\n",
       "1     0.176471\n",
       "2     0.176471\n",
       "3     0.117647\n",
       "4     0.941176\n",
       "5     0.764706\n",
       "6     0.882353\n",
       "7     0.705882\n",
       "8     0.588235\n",
       "9     0.529412\n",
       "10    0.647059\n",
       "11    0.000000\n",
       "12    0.058824\n",
       "13    0.117647\n",
       "14    0.176471\n",
       "15    0.352941\n",
       "16    0.823529\n",
       "17    0.882353\n",
       "18    1.000000\n",
       "19    0.764706\n",
       "20    0.882353\n",
       "21    0.764706\n",
       "Name: Age, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler.fit(df[['Age']])\n",
    "\n",
    "df['Age'] = scaler.transform(df['Age'].values.reshape(-1, 1))\n",
    "\n",
    "df['Age']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4181a31c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:25.899807Z",
     "iopub.status.busy": "2024-05-11T08:40:25.899445Z",
     "iopub.status.idle": "2024-05-11T08:40:25.912529Z",
     "shell.execute_reply": "2024-05-11T08:40:25.911449Z"
    },
    "id": "VI6vbaUkrOHy",
    "outputId": "4c393993-08de-41ff-8152-570c510fd8c4",
    "papermill": {
     "duration": 0.023363,
     "end_time": "2024-05-11T08:40:25.914586",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.891223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Income($)</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rob</td>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.213675</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Michael</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mohan</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.136752</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ismail</td>\n",
       "      <td>0.117647</td>\n",
       "      <td>0.128205</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kory</td>\n",
       "      <td>0.941176</td>\n",
       "      <td>0.897436</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Gautam</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.940171</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>David</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>0.982906</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Andrea</td>\n",
       "      <td>0.705882</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Brad</td>\n",
       "      <td>0.588235</td>\n",
       "      <td>0.948718</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Angelina</td>\n",
       "      <td>0.529412</td>\n",
       "      <td>0.726496</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Donald</td>\n",
       "      <td>0.647059</td>\n",
       "      <td>0.786325</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Tom</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Arnold</td>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.025641</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Jared</td>\n",
       "      <td>0.117647</td>\n",
       "      <td>0.051282</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Stark</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.038462</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Ranbir</td>\n",
       "      <td>0.352941</td>\n",
       "      <td>0.068376</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Dipika</td>\n",
       "      <td>0.823529</td>\n",
       "      <td>0.170940</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Priyanka</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>0.153846</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Nick</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.162393</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Alia</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.299145</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Sid</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>0.316239</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Abdul</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Name       Age  Income($)  Cluster\n",
       "0        Rob  0.058824   0.213675        2\n",
       "1    Michael  0.176471   0.384615        2\n",
       "2      Mohan  0.176471   0.136752        0\n",
       "3     Ismail  0.117647   0.128205        0\n",
       "4       Kory  0.941176   0.897436        1\n",
       "5     Gautam  0.764706   0.940171        1\n",
       "6      David  0.882353   0.982906        1\n",
       "7     Andrea  0.705882   1.000000        1\n",
       "8       Brad  0.588235   0.948718        1\n",
       "9   Angelina  0.529412   0.726496        1\n",
       "10    Donald  0.647059   0.786325        1\n",
       "11       Tom  0.000000   0.000000        0\n",
       "12    Arnold  0.058824   0.025641        0\n",
       "13     Jared  0.117647   0.051282        0\n",
       "14     Stark  0.176471   0.038462        0\n",
       "15    Ranbir  0.352941   0.068376        0\n",
       "16    Dipika  0.823529   0.170940        0\n",
       "17  Priyanka  0.882353   0.153846        0\n",
       "18      Nick  1.000000   0.162393        0\n",
       "19      Alia  0.764706   0.299145        2\n",
       "20       Sid  0.882353   0.316239        2\n",
       "21     Abdul  0.764706   0.111111        0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7c953ff9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:25.931912Z",
     "iopub.status.busy": "2024-05-11T08:40:25.930955Z",
     "iopub.status.idle": "2024-05-11T08:40:25.952327Z",
     "shell.execute_reply": "2024-05-11T08:40:25.951257Z"
    },
    "id": "dAkLsGWlrV5l",
    "outputId": "4c64c041-ba75-4b9f-dbb0-776c1b7c9242",
    "papermill": {
     "duration": 0.03279,
     "end_time": "2024-05-11T08:40:25.954564",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.921774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2],\n",
       "      dtype=int32)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km= KMeans(n_clusters=3)\n",
    "\n",
    "y_pred= km.fit_predict(df[['Age','Income($)']])\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f1da7d8f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:25.971926Z",
     "iopub.status.busy": "2024-05-11T08:40:25.971525Z",
     "iopub.status.idle": "2024-05-11T08:40:25.985107Z",
     "shell.execute_reply": "2024-05-11T08:40:25.984013Z"
    },
    "id": "E2t-Pag7rm2y",
    "outputId": "0828219e-2f32-45a4-d9a3-f493512bd4e5",
    "papermill": {
     "duration": 0.024732,
     "end_time": "2024-05-11T08:40:25.987283",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.962551",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Age</th>\n",
       "      <th>Income($)</th>\n",
       "      <th>Cluster</th>\n",
       "      <th>New_Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rob</td>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.213675</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Michael</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Mohan</td>\n",
       "      <td>0.176471</td>\n",
       "      <td>0.136752</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ismail</td>\n",
       "      <td>0.117647</td>\n",
       "      <td>0.128205</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kory</td>\n",
       "      <td>0.941176</td>\n",
       "      <td>0.897436</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Gautam</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.940171</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>David</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>0.982906</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Andrea</td>\n",
       "      <td>0.705882</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Brad</td>\n",
       "      <td>0.588235</td>\n",
       "      <td>0.948718</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Angelina</td>\n",
       "      <td>0.529412</td>\n",
       "      <td>0.726496</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Name       Age  Income($)  Cluster  New_Cluster\n",
       "0       Rob  0.058824   0.213675        2            0\n",
       "1   Michael  0.176471   0.384615        2            0\n",
       "2     Mohan  0.176471   0.136752        0            0\n",
       "3    Ismail  0.117647   0.128205        0            0\n",
       "4      Kory  0.941176   0.897436        1            1\n",
       "5    Gautam  0.764706   0.940171        1            1\n",
       "6     David  0.882353   0.982906        1            1\n",
       "7    Andrea  0.705882   1.000000        1            1\n",
       "8      Brad  0.588235   0.948718        1            1\n",
       "9  Angelina  0.529412   0.726496        1            1"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['New_Cluster']= y_pred\n",
    "\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5efd3a2d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:26.006237Z",
     "iopub.status.busy": "2024-05-11T08:40:26.004874Z",
     "iopub.status.idle": "2024-05-11T08:40:26.275236Z",
     "shell.execute_reply": "2024-05-11T08:40:26.274110Z"
    },
    "id": "1wOXovZartkx",
    "outputId": "bfcede93-29a7-4fdf-eb92-3e49e1627a2c",
    "papermill": {
     "duration": 0.282537,
     "end_time": "2024-05-11T08:40:26.277850",
     "exception": false,
     "start_time": "2024-05-11T08:40:25.995313",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'New_Clusters')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df1= df[df.New_Cluster==1]\n",
    "df2= df[df.New_Cluster==2]\n",
    "df3= df[df.New_Cluster==0]\n",
    "\n",
    "plt.scatter(x=df1.Age,y=df1['Income($)'],color='green')\n",
    "plt.scatter(x=df2.Age,y=df2['Income($)'],color='red')\n",
    "plt.scatter(x=df3.Age,y=df3['Income($)'],color='blue')\n",
    "\n",
    "plt.title(\"New_Clusters\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "17bed321",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:26.296222Z",
     "iopub.status.busy": "2024-05-11T08:40:26.295739Z",
     "iopub.status.idle": "2024-05-11T08:40:26.303448Z",
     "shell.execute_reply": "2024-05-11T08:40:26.302062Z"
    },
    "id": "rkccH618rzMR",
    "outputId": "5bfcc1a1-87c4-41cd-ab89-392356389b38",
    "papermill": {
     "duration": 0.019964,
     "end_time": "2024-05-11T08:40:26.306221",
     "exception": false,
     "start_time": "2024-05-11T08:40:26.286257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.1372549 , 0.11633428],\n",
       "       [0.72268908, 0.8974359 ],\n",
       "       [0.85294118, 0.2022792 ]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "km.cluster_centers_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3f386d6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:26.324587Z",
     "iopub.status.busy": "2024-05-11T08:40:26.324197Z",
     "iopub.status.idle": "2024-05-11T08:40:26.594323Z",
     "shell.execute_reply": "2024-05-11T08:40:26.593270Z"
    },
    "id": "yTzg81iOsC-a",
    "outputId": "575f75cc-5673-45e8-e252-78b477147ddf",
    "papermill": {
     "duration": 0.282149,
     "end_time": "2024-05-11T08:40:26.596680",
     "exception": false,
     "start_time": "2024-05-11T08:40:26.314531",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'New_Clusters')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df1= df[df.New_Cluster==1]\n",
    "df2= df[df.New_Cluster==2]\n",
    "df3= df[df.New_Cluster==0]\n",
    "\n",
    "plt.scatter(x=df1.Age,y=df1['Income($)'],color='green')\n",
    "plt.scatter(x=df2.Age,y=df2['Income($)'],color='red')\n",
    "plt.scatter(x=df3.Age,y=df3['Income($)'],color='blue')\n",
    "plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],marker='*',label=\"Centroid\")\n",
    "\n",
    "plt.title(\"New_Clusters\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2857a876",
   "metadata": {
    "id": "DftyT-4Nsf15",
    "papermill": {
     "duration": 0.008873,
     "end_time": "2024-05-11T08:40:26.614337",
     "exception": false,
     "start_time": "2024-05-11T08:40:26.605464",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Elbow Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "86e77256",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:26.634627Z",
     "iopub.status.busy": "2024-05-11T08:40:26.634229Z",
     "iopub.status.idle": "2024-05-11T08:40:26.775415Z",
     "shell.execute_reply": "2024-05-11T08:40:26.774142Z"
    },
    "id": "ErTjlJmMsXPr",
    "outputId": "2e9ef800-7c28-4333-966f-989de5aaa403",
    "papermill": {
     "duration": 0.153282,
     "end_time": "2024-05-11T08:40:26.777725",
     "exception": false,
     "start_time": "2024-05-11T08:40:26.624443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n",
      "/opt/conda/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[5.434011511988178,\n",
       " 2.091136388699078,\n",
       " 0.4750783498553096,\n",
       " 0.34910470944195654,\n",
       " 0.26640301246684156,\n",
       " 0.22020960864009398,\n",
       " 0.19945716713417008,\n",
       " 0.14417954691813864,\n",
       " 0.10188787724979426]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k_range= range(1,10)\n",
    "\n",
    "sse = []\n",
    "for k in k_range:\n",
    "    km= KMeans(n_clusters=k)\n",
    "    km.fit(df[['Age','Income($)']])\n",
    "    sse.append(km.inertia_)\n",
    "\n",
    "sse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7c824c14",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-11T08:40:26.798012Z",
     "iopub.status.busy": "2024-05-11T08:40:26.797001Z",
     "iopub.status.idle": "2024-05-11T08:40:27.051211Z",
     "shell.execute_reply": "2024-05-11T08:40:27.050163Z"
    },
    "id": "3ENTJvVWszA5",
    "outputId": "a5da0568-8a84-4556-e888-d136082cac65",
    "papermill": {
     "duration": 0.266899,
     "end_time": "2024-05-11T08:40:27.053648",
     "exception": false,
     "start_time": "2024-05-11T08:40:26.786749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'SSE')"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(k_range,sse)\n",
    "plt.xlabel(\"Number of Clusters\")\n",
    "plt.ylabel(\"SSE\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9e0ed36",
   "metadata": {
    "papermill": {
     "duration": 0.009107,
     "end_time": "2024-05-11T08:40:27.072141",
     "exception": false,
     "start_time": "2024-05-11T08:40:27.063034",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Elbow is formed at 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78955b3f",
   "metadata": {
    "id": "ihr6hpKgs1xZ",
    "papermill": {
     "duration": 0.009012,
     "end_time": "2024-05-11T08:40:27.090554",
     "exception": false,
     "start_time": "2024-05-11T08:40:27.081542",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "K-Means Clustering",
   "provenance": []
  },
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4982219,
     "sourceId": 8378569,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30698,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7.798951,
   "end_time": "2024-05-11T08:40:27.720583",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-11T08:40:19.921632",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
